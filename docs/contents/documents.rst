Douments!! Documents!! Documents!!
======================================

　この章では、Python周りのDocumentationについて書きます。

コメント？
============

　プログラミング言語の開発において、ドキュメンテーションというのは、たびたび議論になる部分なのかなと思ったりもします。アジャイル開発が、たびたび「ドキュメントを書かない」という風に誤解されるのは、何処かしら「ドキュメントを書きたくない、そんなことより目の前の仕事を終わらせておいしいビールを飲みたい」という欲求があるからだと考えます。

　また、マーフィーの法則（悪いことは必ず起きる、というアレですね）によれば、ドキュメントの殆どは整備されないし、ドキュメントが整備されたとしても間違いだらけです。なぜなら、ドキュメントはコードではないので、Syntax Errorも起きないからです。

　さて、これらの問題に何か良い手はあるのでしょうか？一つには、PythonにはDoctestと呼ばれる素晴らしい機能があることを知っておくのは悪くないでしょう。

PythonにおけるDocument
=======================

　……とその前に、Pythonの、いわゆる標準のドキュメントの仕組みについて説明します。

　Pythonでは、何らかの宣言の、（コメントを抜かした）次の行にある文字列リテラルを、その関数 or クラス or メソッドのドキュメントとして保持します。

　ちょっとわかりにくいですね。こういう場合はサンプルコードを見せたほうが早いかもしれません。

::

   def invalid_function():
       u"""
	   これは特に意味のない関数です。
	   """
	   pass

　さて、``invalid_function``が定義された次の複数行宣言である``"""``で囲まれた部分が、この関数のドキュメントとして扱われます。とはいえ、「ドキュメントで扱われる」つーったって、それが取り出せなければ意味がないですね。さっそく取り出してみましょう。

::
   
   >>> print invalid_function.__doc__
   これは特に意味のない関数です

　そうです。関数オブジェクト（つまり、```()```を使わずに関数名にアクセスする）のプライベート属性として、```__doc__```属性にあるわけですね。もちろん、対話コンソール上でどのような関数かを調べるために、とりあえず詳細を取り出すためにも便利です。

Documentは動かせなきゃ意味が無い
==================================

　さて、テスト信者の場合（著者も、その気はちょっとだけあります）、「最良のドキュメントは動くコードである」と考えます。でもそんな都合のいい話が、まあPythonには既に用意されていたりするわけです。

　言うは簡単なので、とりあえず「3の倍数になったらアホになる関数」と、そのテストを書いてみましょう。

::

   def world_foobar(number):
        u"""
	    3の倍数になったらアホになる関数です
	    >>> world_foobar(1)
	    1
	    >>> world_foobar(3)
	    aho!
	    """
	    output = number
	    if number % 3 == 0:
	        output = "aho!"
	    print output

